// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(uuid())
  authId    String   @unique
  email     String   @unique
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  // New relationships
  createdIncidents  Incident[] @relation("CreatedByUser")
  assignedIncidents Incident[] @relation("AssignedToUser")

  integrations Integration[] 

  @@map("user_profiles")
}

model Incident {
  id                String     @id @default(uuid())
  title             String
  description       String
  status            IncidentStatus @default(OPEN)
  severity          IncidentSeverity
  category          String     
  source            String     
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  createdById       String
  createdBy         User       @relation("CreatedByUser", fields: [createdById], references: [id])

  assignedToId      String?
  assignedTo        User?      @relation("AssignedToUser", fields: [assignedToId], references: [id])

  incidentLogs      IncidentLog[]
  investigationNotes String?   
  mitigationSteps    String?
  resolutionSummary  String?

  affectedSystems   String[]   
  reportedIP        String?    
  isReportable      Boolean    @default(false) 
  reportDeadline    DateTime? 
  notifiedAuthorities Boolean  @default(false)
  attachments       Json?     

  @@map("incidents")
}

model IncidentLog {
  id         String   @id @default(uuid())
  incidentId String
  userEmail  String
  message    String
  createdAt  DateTime @default(now())

  incident   Incident @relation(fields: [incidentId], references: [id])

  @@map("incident_logs")
}

enum IncidentStatus {
  OPEN
  INVESTIGATING
  RESOLVED
  CLOSED
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}


enum Role {
  ADMIN
  ANALYST
  USER
}

model Integration {
  id         String   @id @default(uuid())
  type       IntegrationType
  url        String?         // for webhook-based (Slack/Discord)
  token      String?         // for OAuth-based (GitHub/Jira)
  metadata   Json?           
  userId     String
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])

  @@map("integrations")
}

enum IntegrationType {
  SLACK
  DISCORD
  GITHUB
  JIRA
  CUSTOM_WEBHOOK
}